# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindow.ui'
##
## Created by: Qt User Interface Compiler version 6.6.1
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QDockWidget, QGridLayout, QMainWindow,
    QMenu, QMenuBar, QSizePolicy, QStatusBar,
    QToolBar, QVBoxLayout, QWidget)

from zlabel.widgets.canvas import Canvas
from zlabel.widgets.dock_anno import ZDockAnnotationContent
from zlabel.widgets.dock_file import ZDockFileContent
from zlabel.widgets.dock_info import ZDockInfoContent
from zlabel.widgets.dock_label import ZDockLabelContent
import icons_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(1034, 727)
        MainWindow.setMinimumSize(QSize(800, 600))
        font = QFont()
        font.setFamilies([u"Times New Roman"])
        font.setPointSize(12)
        MainWindow.setFont(font)
        icon = QIcon()
        icon.addFile(u":/icon/icons/zlabel.svg", QSize(), QIcon.Normal, QIcon.Off)
        MainWindow.setWindowIcon(icon)
        self.actionOpen_dir = QAction(MainWindow)
        self.actionOpen_dir.setObjectName(u"actionOpen_dir")
        self.actionOpen_dir.setEnabled(False)
        icon1 = QIcon()
        icon1.addFile(u":/icon/icons/pic.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpen_dir.setIcon(icon1)
        self.actionZoom_in = QAction(MainWindow)
        self.actionZoom_in.setObjectName(u"actionZoom_in")
        icon2 = QIcon()
        icon2.addFile(u":/icon/icons/zoom-in.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_in.setIcon(icon2)
        self.actionZoom_out = QAction(MainWindow)
        self.actionZoom_out.setObjectName(u"actionZoom_out")
        icon3 = QIcon()
        icon3.addFile(u":/icon/icons/zoom-out.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoom_out.setIcon(icon3)
        self.actionFit_wiondow = QAction(MainWindow)
        self.actionFit_wiondow.setObjectName(u"actionFit_wiondow")
        self.actionFit_wiondow.setEnabled(False)
        icon4 = QIcon()
        icon4.addFile(u":/icon/icons/fullwidth.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFit_wiondow.setIcon(icon4)
        self.actionSettings = QAction(MainWindow)
        self.actionSettings.setObjectName(u"actionSettings")
        icon5 = QIcon()
        icon5.addFile(u":/icon/icons/setting-two.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSettings.setIcon(icon5)
        self.actionExit = QAction(MainWindow)
        self.actionExit.setObjectName(u"actionExit")
        icon6 = QIcon()
        icon6.addFile(u":/icon/icons/power.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExit.setIcon(icon6)
        self.actionSave_dir = QAction(MainWindow)
        self.actionSave_dir.setObjectName(u"actionSave_dir")
        self.actionSave_dir.setEnabled(False)
        icon7 = QIcon()
        icon7.addFile(u":/icon/icons/folder-open.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave_dir.setIcon(icon7)
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        icon8 = QIcon()
        icon8.addFile(u":/icon/icons/save.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSave.setIcon(icon8)
        self.actionPrev = QAction(MainWindow)
        self.actionPrev.setObjectName(u"actionPrev")
        self.actionPrev.setCheckable(False)
        icon9 = QIcon()
        icon9.addFile(u":/icon/icons/back.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPrev.setIcon(icon9)
        self.actionPrev.setMenuRole(QAction.TextHeuristicRole)
        self.actionPrev.setPriority(QAction.NormalPriority)
        self.actionNext = QAction(MainWindow)
        self.actionNext.setObjectName(u"actionNext")
        icon10 = QIcon()
        icon10.addFile(u":/icon/icons/next.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNext.setIcon(icon10)
        self.actionShortcut = QAction(MainWindow)
        self.actionShortcut.setObjectName(u"actionShortcut")
        icon11 = QIcon()
        icon11.addFile(u":/icon/icons/keyboard-one.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionShortcut.setIcon(icon11)
        self.actionAbout = QAction(MainWindow)
        self.actionAbout.setObjectName(u"actionAbout")
        icon12 = QIcon()
        icon12.addFile(u":/icon/icons/me.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAbout.setIcon(icon12)
        self.actionSAM = QAction(MainWindow)
        self.actionSAM.setObjectName(u"actionSAM")
        self.actionSAM.setCheckable(True)
        icon13 = QIcon()
        icon13.addFile(u":/icon/icons/M_Favicon.ico", QSize(), QIcon.Normal, QIcon.Off)
        self.actionSAM.setIcon(icon13)
        self.actionDelete = QAction(MainWindow)
        self.actionDelete.setObjectName(u"actionDelete")
        self.actionDelete.setEnabled(False)
        icon14 = QIcon()
        icon14.addFile(u":/icon/icons/delete-3.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDelete.setIcon(icon14)
        self.actionBit_map = QAction(MainWindow)
        self.actionBit_map.setObjectName(u"actionBit_map")
        self.actionBit_map.setCheckable(False)
        self.actionBit_map.setIcon(icon1)
        self.actionTo_top = QAction(MainWindow)
        self.actionTo_top.setObjectName(u"actionTo_top")
        self.actionTo_top.setEnabled(False)
        icon15 = QIcon()
        icon15.addFile(u":/icon/icons/to-top.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTo_top.setIcon(icon15)
        self.actionTo_bottom = QAction(MainWindow)
        self.actionTo_bottom.setObjectName(u"actionTo_bottom")
        self.actionTo_bottom.setEnabled(False)
        icon16 = QIcon()
        icon16.addFile(u":/icon/icons/to-bottom.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTo_bottom.setIcon(icon16)
        self.actionToVOC = QAction(MainWindow)
        self.actionToVOC.setObjectName(u"actionToVOC")
        icon17 = QIcon()
        icon17.addFile(u":/icon/icons/VOC_32x32.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionToVOC.setIcon(icon17)
        self.actionChinese = QAction(MainWindow)
        self.actionChinese.setObjectName(u"actionChinese")
        self.actionChinese.setCheckable(True)
        self.actionChinese.setFont(font)
        self.actionEnglish = QAction(MainWindow)
        self.actionEnglish.setObjectName(u"actionEnglish")
        self.actionEnglish.setCheckable(True)
        self.actionEnglish.setFont(font)
        self.actionBackspace = QAction(MainWindow)
        self.actionBackspace.setObjectName(u"actionBackspace")
        icon18 = QIcon()
        icon18.addFile(u":/icon/icons/delete-two.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionBackspace.setIcon(icon18)
        self.actionCancel = QAction(MainWindow)
        self.actionCancel.setObjectName(u"actionCancel")
        icon19 = QIcon()
        icon19.addFile(u":/icon/icons/close-one.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionCancel.setIcon(icon19)
        self.actionFinish = QAction(MainWindow)
        self.actionFinish.setObjectName(u"actionFinish")
        icon20 = QIcon()
        icon20.addFile(u":/icon/icons/check-one.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionFinish.setIcon(icon20)
        self.actionPolygon = QAction(MainWindow)
        self.actionPolygon.setObjectName(u"actionPolygon")
        self.actionPolygon.setEnabled(False)
        icon21 = QIcon()
        icon21.addFile(u":/icon/icons/anchor.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPolygon.setIcon(icon21)
        self.actionVisible = QAction(MainWindow)
        self.actionVisible.setObjectName(u"actionVisible")
        self.actionVisible.setCheckable(True)
        self.actionVisible.setChecked(True)
        icon22 = QIcon()
        icon22.addFile(u":/icon/icons/eye-2.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionVisible.setIcon(icon22)
        self.actionExport = QAction(MainWindow)
        self.actionExport.setObjectName(u"actionExport")
        icon23 = QIcon()
        icon23.addFile(u":/icon/icons/efferent-three.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionExport.setIcon(icon23)
        self.action_import_task = QAction(MainWindow)
        self.action_import_task.setObjectName(u"action_import_task")
        icon24 = QIcon()
        icon24.addFile(u":/icon/icons/afferent-three.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.action_import_task.setIcon(icon24)
        self.actionTo_LabelMe = QAction(MainWindow)
        self.actionTo_LabelMe.setObjectName(u"actionTo_LabelMe")
        icon25 = QIcon()
        icon25.addFile(u":/icon/icons/labelme_32x32.png", QSize(), QIcon.Normal, QIcon.Off)
        self.actionTo_LabelMe.setIcon(icon25)
        self.actionContour_Max_only = QAction(MainWindow)
        self.actionContour_Max_only.setObjectName(u"actionContour_Max_only")
        self.actionContour_Max_only.setCheckable(True)
        self.actionContour_Max_only.setFont(font)
        self.actionContour_External = QAction(MainWindow)
        self.actionContour_External.setObjectName(u"actionContour_External")
        self.actionContour_External.setCheckable(True)
        self.actionContour_External.setFont(font)
        self.actionContour_All = QAction(MainWindow)
        self.actionContour_All.setObjectName(u"actionContour_All")
        self.actionContour_All.setCheckable(True)
        self.actionContour_All.setFont(font)
        self.actionModel_manage = QAction(MainWindow)
        self.actionModel_manage.setObjectName(u"actionModel_manage")
        icon26 = QIcon()
        icon26.addFile(u":/icon/icons/list-middle.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionModel_manage.setIcon(icon26)
        self.actionModel_manage.setFont(font)
        self.actionRectangle = QAction(MainWindow)
        self.actionRectangle.setObjectName(u"actionRectangle")
        icon27 = QIcon()
        icon27.addFile(u":/icon/icons/rectangle_two_points.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRectangle.setIcon(icon27)
        self.actionPoint = QAction(MainWindow)
        self.actionPoint.setObjectName(u"actionPoint")
        icon28 = QIcon()
        icon28.addFile(u":/icon/icons/three_dots.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPoint.setIcon(icon28)
        self.actionMove = QAction(MainWindow)
        self.actionMove.setObjectName(u"actionMove")
        self.actionMove.setCheckable(False)
        self.actionMove.setEnabled(False)
        icon29 = QIcon()
        icon29.addFile(u":/icon/icons/mouse_pointer.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionMove.setIcon(icon29)
        self.actionEdit = QAction(MainWindow)
        self.actionEdit.setObjectName(u"actionEdit")
        icon30 = QIcon()
        icon30.addFile(u":/icon/icons/edit.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionEdit.setIcon(icon30)
        self.actionOpenCV = QAction(MainWindow)
        self.actionOpenCV.setObjectName(u"actionOpenCV")
        self.actionOpenCV.setCheckable(True)
        icon31 = QIcon()
        icon31.addFile(u":/icon/icons/opencv.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionOpenCV.setIcon(icon31)
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        self.actionNew_Project = QAction(MainWindow)
        self.actionNew_Project.setObjectName(u"actionNew_Project")
        self.actionR = QAction(MainWindow)
        self.actionR.setObjectName(u"actionR")
        self.actionR.setCheckable(True)
        self.actionR.setChecked(False)
        icon32 = QIcon()
        icon32.addFile(u":/icon/icons/channel_r.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionR.setIcon(icon32)
        self.actionG = QAction(MainWindow)
        self.actionG.setObjectName(u"actionG")
        self.actionG.setCheckable(True)
        icon33 = QIcon()
        icon33.addFile(u":/icon/icons/channel_g.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionG.setIcon(icon33)
        self.actionB = QAction(MainWindow)
        self.actionB.setObjectName(u"actionB")
        self.actionB.setCheckable(True)
        icon34 = QIcon()
        icon34.addFile(u":/icon/icons/channel_b.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionB.setIcon(icon34)
        self.actionRGB = QAction(MainWindow)
        self.actionRGB.setObjectName(u"actionRGB")
        self.actionRGB.setCheckable(True)
        self.actionRGB.setChecked(True)
        icon35 = QIcon()
        icon35.addFile(u":/icon/icons/channel.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRGB.setIcon(icon35)
        self.actionGray = QAction(MainWindow)
        self.actionGray.setObjectName(u"actionGray")
        self.actionGray.setCheckable(True)
        icon36 = QIcon()
        icon36.addFile(u":/icon/icons/channel_gray.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionGray.setIcon(icon36)
        self.actionMerge = QAction(MainWindow)
        self.actionMerge.setObjectName(u"actionMerge")
        icon37 = QIcon()
        icon37.addFile(u":/icon/icons/merge.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionMerge.setIcon(icon37)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.gridLayout = QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName(u"gridLayout")
        self.gridLayout.setContentsMargins(3, 3, 3, 3)
        self.canvas = Canvas(self.centralwidget)
        self.canvas.setObjectName(u"canvas")

        self.gridLayout.addWidget(self.canvas, 0, 0, 1, 1)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setEnabled(True)
        self.menubar.setGeometry(QRect(0, 0, 1034, 24))
        self.menubar.setFont(font)
        self.menubar.setAutoFillBackground(False)
        self.menubar.setDefaultUp(False)
        self.menubar.setNativeMenuBar(True)
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuFile.setFont(font)
        self.menuView = QMenu(self.menubar)
        self.menuView.setObjectName(u"menuView")
        self.menuView.setFont(font)
        self.menuAbout = QMenu(self.menubar)
        self.menuAbout.setObjectName(u"menuAbout")
        self.menuAbout.setFont(font)
        self.menuLaguage = QMenu(self.menuAbout)
        self.menuLaguage.setObjectName(u"menuLaguage")
        self.menuLaguage.setEnabled(False)
        sizePolicy = QSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.MinimumExpanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.menuLaguage.sizePolicy().hasHeightForWidth())
        self.menuLaguage.setSizePolicy(sizePolicy)
        self.menuLaguage.setMinimumSize(QSize(800, 600))
        icon38 = QIcon()
        icon38.addFile(u":/icon/icons/translate.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.menuLaguage.setIcon(icon38)
        self.menuTools = QMenu(self.menubar)
        self.menuTools.setObjectName(u"menuTools")
        self.menuTools.setEnabled(True)
        self.menuTools.setFont(font)
        self.menuEdit = QMenu(self.menubar)
        self.menuEdit.setObjectName(u"menuEdit")
        self.menuEdit.setFont(font)
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        self.statusbar.setLayoutDirection(Qt.LeftToRight)
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        self.toolBar.setFont(font)
        self.toolBar.setIconSize(QSize(24, 24))
        self.toolBar.setToolButtonStyle(Qt.ToolButtonIconOnly)
        self.toolBar.setFloatable(False)
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBar)
        self.dock_infos = QDockWidget(MainWindow)
        self.dock_infos.setObjectName(u"dock_infos")
        sizePolicy1 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Minimum)
        sizePolicy1.setHorizontalStretch(0)
        sizePolicy1.setVerticalStretch(0)
        sizePolicy1.setHeightForWidth(self.dock_infos.sizePolicy().hasHeightForWidth())
        self.dock_infos.setSizePolicy(sizePolicy1)
        self.dock_infos.setMaximumSize(QSize(524287, 150))
        self.dockcnt_info = ZDockInfoContent()
        self.dockcnt_info.setObjectName(u"dockcnt_info")
        self.dock_infos.setWidget(self.dockcnt_info)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dock_infos)
        self.dock_annos = QDockWidget(MainWindow)
        self.dock_annos.setObjectName(u"dock_annos")
        sizePolicy2 = QSizePolicy(QSizePolicy.Minimum, QSizePolicy.Preferred)
        sizePolicy2.setHorizontalStretch(0)
        sizePolicy2.setVerticalStretch(0)
        sizePolicy2.setHeightForWidth(self.dock_annos.sizePolicy().hasHeightForWidth())
        self.dock_annos.setSizePolicy(sizePolicy2)
        self.dock_annos.setMinimumSize(QSize(85, 43))
        self.dockcnt_anno = ZDockAnnotationContent()
        self.dockcnt_anno.setObjectName(u"dockcnt_anno")
        self.dock_annos.setWidget(self.dockcnt_anno)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dock_annos)
        self.dock_labels = QDockWidget(MainWindow)
        self.dock_labels.setObjectName(u"dock_labels")
        sizePolicy2.setHeightForWidth(self.dock_labels.sizePolicy().hasHeightForWidth())
        self.dock_labels.setSizePolicy(sizePolicy2)
        self.dock_labels.setFloating(False)
        self.dock_labels.setFeatures(QDockWidget.DockWidgetClosable|QDockWidget.DockWidgetFloatable|QDockWidget.DockWidgetMovable)
        self.dock_labels.setAllowedAreas(Qt.AllDockWidgetAreas)
        self.dockcnt_labels = ZDockLabelContent()
        self.dockcnt_labels.setObjectName(u"dockcnt_labels")
        self.verticalLayout = QVBoxLayout(self.dockcnt_labels)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.dock_labels.setWidget(self.dockcnt_labels)
        MainWindow.addDockWidget(Qt.RightDockWidgetArea, self.dock_labels)
        self.dock_files = QDockWidget(MainWindow)
        self.dock_files.setObjectName(u"dock_files")
        sizePolicy3 = QSizePolicy(QSizePolicy.MinimumExpanding, QSizePolicy.Expanding)
        sizePolicy3.setHorizontalStretch(0)
        sizePolicy3.setVerticalStretch(0)
        sizePolicy3.setHeightForWidth(self.dock_files.sizePolicy().hasHeightForWidth())
        self.dock_files.setSizePolicy(sizePolicy3)
        self.dock_files.setMinimumSize(QSize(81, 41))
        self.dock_files.setMaximumSize(QSize(300, 524287))
        self.dockcnt_files = ZDockFileContent()
        self.dockcnt_files.setObjectName(u"dockcnt_files")
        self.dockcnt_files.setMinimumSize(QSize(60, 0))
        self.dockcnt_files.setMaximumSize(QSize(300, 16777215))
        self.dock_files.setWidget(self.dockcnt_files)
        MainWindow.addDockWidget(Qt.LeftDockWidgetArea, self.dock_files)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menubar.addAction(self.menuEdit.menuAction())
        self.menubar.addAction(self.menuView.menuAction())
        self.menubar.addAction(self.menuTools.menuAction())
        self.menubar.addAction(self.menuAbout.menuAction())
        self.menuFile.addAction(self.action_import_task)
        self.menuFile.addAction(self.actionExport)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionPrev)
        self.menuFile.addAction(self.actionNext)
        self.menuFile.addSeparator()
        self.menuFile.addAction(self.actionSettings)
        self.menuFile.addAction(self.actionExit)
        self.menuView.addAction(self.actionZoom_in)
        self.menuView.addAction(self.actionZoom_out)
        self.menuView.addAction(self.actionFit_wiondow)
        self.menuView.addSeparator()
        self.menuView.addAction(self.actionR)
        self.menuView.addAction(self.actionG)
        self.menuView.addAction(self.actionB)
        self.menuView.addAction(self.actionRGB)
        self.menuView.addAction(self.actionGray)
        self.menuAbout.addAction(self.menuLaguage.menuAction())
        self.menuAbout.addAction(self.actionShortcut)
        self.menuAbout.addAction(self.actionAbout)
        self.menuLaguage.addAction(self.actionChinese)
        self.menuLaguage.addAction(self.actionEnglish)
        self.menuEdit.addAction(self.actionSAM)
        self.menuEdit.addAction(self.actionOpenCV)
        self.menuEdit.addAction(self.actionMove)
        self.menuEdit.addAction(self.actionEdit)
        self.menuEdit.addAction(self.actionRectangle)
        self.menuEdit.addAction(self.actionPoint)
        self.menuEdit.addAction(self.actionPolygon)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionFinish)
        self.menuEdit.addAction(self.actionCancel)
        self.menuEdit.addAction(self.actionSave)
        self.menuEdit.addSeparator()
        self.menuEdit.addAction(self.actionUndo)
        self.menuEdit.addAction(self.actionRedo)
        self.menuEdit.addAction(self.actionMerge)
        self.toolBar.addAction(self.actionPrev)
        self.toolBar.addAction(self.actionNext)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSAM)
        self.toolBar.addAction(self.actionOpenCV)
        self.toolBar.addAction(self.actionMove)
        self.toolBar.addAction(self.actionEdit)
        self.toolBar.addAction(self.actionRectangle)
        self.toolBar.addAction(self.actionPoint)
        self.toolBar.addAction(self.actionPolygon)
        self.toolBar.addAction(self.actionMerge)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionFinish)
        self.toolBar.addAction(self.actionCancel)
        self.toolBar.addAction(self.actionSave)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionZoom_in)
        self.toolBar.addAction(self.actionZoom_out)
        self.toolBar.addAction(self.actionFit_wiondow)
        self.toolBar.addAction(self.actionVisible)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionSave_dir)
        self.toolBar.addAction(self.actionOpen_dir)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionGray)
        self.toolBar.addAction(self.actionR)
        self.toolBar.addAction(self.actionG)
        self.toolBar.addAction(self.actionB)
        self.toolBar.addAction(self.actionRGB)
        self.toolBar.addSeparator()

        self.retranslateUi(MainWindow)

        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"ZLabel", None))
        self.actionOpen_dir.setText(QCoreApplication.translate("MainWindow", u"Images dir", None))
#if QT_CONFIG(statustip)
        self.actionOpen_dir.setStatusTip(QCoreApplication.translate("MainWindow", u"Open images dir.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionOpen_dir.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+O", None))
#endif // QT_CONFIG(shortcut)
        self.actionZoom_in.setText(QCoreApplication.translate("MainWindow", u"Zoom in", None))
#if QT_CONFIG(statustip)
        self.actionZoom_in.setStatusTip(QCoreApplication.translate("MainWindow", u"Zoom in.", None))
#endif // QT_CONFIG(statustip)
        self.actionZoom_out.setText(QCoreApplication.translate("MainWindow", u"Zoom out", None))
#if QT_CONFIG(statustip)
        self.actionZoom_out.setStatusTip(QCoreApplication.translate("MainWindow", u"Zoom out.", None))
#endif // QT_CONFIG(statustip)
        self.actionFit_wiondow.setText(QCoreApplication.translate("MainWindow", u"Fit window", None))
#if QT_CONFIG(tooltip)
        self.actionFit_wiondow.setToolTip(QCoreApplication.translate("MainWindow", u"Fit window", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionFit_wiondow.setStatusTip(QCoreApplication.translate("MainWindow", u"Fit window.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionFit_wiondow.setShortcut(QCoreApplication.translate("MainWindow", u"F", None))
#endif // QT_CONFIG(shortcut)
        self.actionSettings.setText(QCoreApplication.translate("MainWindow", u"Setting", None))
#if QT_CONFIG(statustip)
        self.actionSettings.setStatusTip(QCoreApplication.translate("MainWindow", u"Setting.", None))
#endif // QT_CONFIG(statustip)
        self.actionExit.setText(QCoreApplication.translate("MainWindow", u"Exit", None))
#if QT_CONFIG(tooltip)
        self.actionExit.setToolTip(QCoreApplication.translate("MainWindow", u"Exit", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionExit.setStatusTip(QCoreApplication.translate("MainWindow", u"Exit.", None))
#endif // QT_CONFIG(statustip)
        self.actionSave_dir.setText(QCoreApplication.translate("MainWindow", u"Save dir", None))
        self.actionSave_dir.setIconText(QCoreApplication.translate("MainWindow", u"Save dir", None))
#if QT_CONFIG(statustip)
        self.actionSave_dir.setStatusTip(QCoreApplication.translate("MainWindow", u"Select Save dir", None))
#endif // QT_CONFIG(statustip)
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
#if QT_CONFIG(tooltip)
        self.actionSave.setToolTip(QCoreApplication.translate("MainWindow", u"Save Project (Ctrl+S)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSave.setStatusTip(QCoreApplication.translate("MainWindow", u"Save Project", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionSave.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+S", None))
#endif // QT_CONFIG(shortcut)
        self.actionPrev.setText(QCoreApplication.translate("MainWindow", u"Prev image", None))
#if QT_CONFIG(tooltip)
        self.actionPrev.setToolTip(QCoreApplication.translate("MainWindow", u"Prev image (A)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionPrev.setStatusTip(QCoreApplication.translate("MainWindow", u"Prev image (A)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionPrev.setShortcut(QCoreApplication.translate("MainWindow", u"A", None))
#endif // QT_CONFIG(shortcut)
        self.actionNext.setText(QCoreApplication.translate("MainWindow", u"Next image", None))
#if QT_CONFIG(tooltip)
        self.actionNext.setToolTip(QCoreApplication.translate("MainWindow", u"Next image (D)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionNext.setStatusTip(QCoreApplication.translate("MainWindow", u"Next image (D)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionNext.setShortcut(QCoreApplication.translate("MainWindow", u"D", None))
#endif // QT_CONFIG(shortcut)
        self.actionShortcut.setText(QCoreApplication.translate("MainWindow", u"Shortcut", None))
        self.actionAbout.setText(QCoreApplication.translate("MainWindow", u"About", None))
        self.actionSAM.setText(QCoreApplication.translate("MainWindow", u"SAM", None))
#if QT_CONFIG(tooltip)
        self.actionSAM.setToolTip(QCoreApplication.translate("MainWindow", u"SAM (Q)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionSAM.setStatusTip(QCoreApplication.translate("MainWindow", u"SAM (Q)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionSAM.setShortcut(QCoreApplication.translate("MainWindow", u"Q", None))
#endif // QT_CONFIG(shortcut)
        self.actionDelete.setText(QCoreApplication.translate("MainWindow", u"Delete", None))
#if QT_CONFIG(tooltip)
        self.actionDelete.setToolTip(QCoreApplication.translate("MainWindow", u"Delete polygon", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionDelete.setStatusTip(QCoreApplication.translate("MainWindow", u"Delete polygon.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionDelete.setShortcut(QCoreApplication.translate("MainWindow", u"Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionBit_map.setText(QCoreApplication.translate("MainWindow", u"Bit map", None))
#if QT_CONFIG(statustip)
        self.actionBit_map.setStatusTip(QCoreApplication.translate("MainWindow", u"Show instance or segmeent state.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionBit_map.setShortcut(QCoreApplication.translate("MainWindow", u"Space", None))
#endif // QT_CONFIG(shortcut)
        self.actionTo_top.setText(QCoreApplication.translate("MainWindow", u"To top", None))
#if QT_CONFIG(tooltip)
        self.actionTo_top.setToolTip(QCoreApplication.translate("MainWindow", u"Move polygon to top layer", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionTo_top.setStatusTip(QCoreApplication.translate("MainWindow", u"Move polygon to top layer.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionTo_top.setShortcut(QCoreApplication.translate("MainWindow", u"T", None))
#endif // QT_CONFIG(shortcut)
        self.actionTo_bottom.setText(QCoreApplication.translate("MainWindow", u"To bottom", None))
#if QT_CONFIG(tooltip)
        self.actionTo_bottom.setToolTip(QCoreApplication.translate("MainWindow", u"Move polygon to bottom layer", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionTo_bottom.setStatusTip(QCoreApplication.translate("MainWindow", u"Move polygon to bottom layer.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionTo_bottom.setShortcut(QCoreApplication.translate("MainWindow", u"B", None))
#endif // QT_CONFIG(shortcut)
        self.actionToVOC.setText(QCoreApplication.translate("MainWindow", u"To VOC", None))
#if QT_CONFIG(tooltip)
        self.actionToVOC.setToolTip(QCoreApplication.translate("MainWindow", u"Convert ISAT to VOC", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionToVOC.setStatusTip(QCoreApplication.translate("MainWindow", u"Convert ISAT jsons to VOC png images.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionToVOC.setWhatsThis("")
#endif // QT_CONFIG(whatsthis)
        self.actionChinese.setText(QCoreApplication.translate("MainWindow", u"\u4e2d\u6587", None))
        self.actionEnglish.setText(QCoreApplication.translate("MainWindow", u"English", None))
        self.actionBackspace.setText(QCoreApplication.translate("MainWindow", u"Backspace", None))
#if QT_CONFIG(tooltip)
        self.actionBackspace.setToolTip(QCoreApplication.translate("MainWindow", u"Backspace", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionBackspace.setStatusTip(QCoreApplication.translate("MainWindow", u"Backspace.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionBackspace.setShortcut(QCoreApplication.translate("MainWindow", u"Backspace", None))
#endif // QT_CONFIG(shortcut)
        self.actionCancel.setText(QCoreApplication.translate("MainWindow", u"Clear", None))
#if QT_CONFIG(tooltip)
        self.actionCancel.setToolTip(QCoreApplication.translate("MainWindow", u"Clear All (Ctrl+Del)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionCancel.setStatusTip(QCoreApplication.translate("MainWindow", u"Clear All (Ctrl+Del)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionCancel.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Del", None))
#endif // QT_CONFIG(shortcut)
        self.actionFinish.setText(QCoreApplication.translate("MainWindow", u"Finish", None))
#if QT_CONFIG(tooltip)
        self.actionFinish.setToolTip(QCoreApplication.translate("MainWindow", u"Submit (Ctrl + Enter)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionFinish.setStatusTip(QCoreApplication.translate("MainWindow", u"Annotate finished.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionFinish.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Return", None))
#endif // QT_CONFIG(shortcut)
        self.actionPolygon.setText(QCoreApplication.translate("MainWindow", u"Polygon", None))
#if QT_CONFIG(tooltip)
        self.actionPolygon.setToolTip(QCoreApplication.translate("MainWindow", u"Draw polygon", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionPolygon.setStatusTip(QCoreApplication.translate("MainWindow", u"Accurately annotate by drawing polygon. ", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionPolygon.setShortcut(QCoreApplication.translate("MainWindow", u"O", None))
#endif // QT_CONFIG(shortcut)
        self.actionVisible.setText(QCoreApplication.translate("MainWindow", u"Visible", None))
#if QT_CONFIG(tooltip)
        self.actionVisible.setToolTip(QCoreApplication.translate("MainWindow", u"Visible", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionVisible.setStatusTip(QCoreApplication.translate("MainWindow", u"Visible.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionVisible.setShortcut(QCoreApplication.translate("MainWindow", u"V", None))
#endif // QT_CONFIG(shortcut)
        self.actionExport.setText(QCoreApplication.translate("MainWindow", u"Export", None))
#if QT_CONFIG(tooltip)
        self.actionExport.setToolTip(QCoreApplication.translate("MainWindow", u"Convert ISAT to COCO", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionExport.setStatusTip(QCoreApplication.translate("MainWindow", u"Convert ISAT jsons to COCO json.", None))
#endif // QT_CONFIG(statustip)
        self.action_import_task.setText(QCoreApplication.translate("MainWindow", u"Import", None))
        self.actionTo_LabelMe.setText(QCoreApplication.translate("MainWindow", u"To LabelMe", None))
#if QT_CONFIG(tooltip)
        self.actionTo_LabelMe.setToolTip(QCoreApplication.translate("MainWindow", u"Convert ISAT to LabelMe", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionTo_LabelMe.setStatusTip(QCoreApplication.translate("MainWindow", u"Convert ISAT jsons to LabelMe jsons.", None))
#endif // QT_CONFIG(statustip)
        self.actionContour_Max_only.setText(QCoreApplication.translate("MainWindow", u"Max only", None))
#if QT_CONFIG(statustip)
        self.actionContour_Max_only.setStatusTip(QCoreApplication.translate("MainWindow", u"Max contour save only.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionContour_Max_only.setWhatsThis(QCoreApplication.translate("MainWindow", u"Max contour save only.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionContour_External.setText(QCoreApplication.translate("MainWindow", u"External", None))
#if QT_CONFIG(statustip)
        self.actionContour_External.setStatusTip(QCoreApplication.translate("MainWindow", u"External contour save only.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionContour_External.setWhatsThis(QCoreApplication.translate("MainWindow", u"External contour save only.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionContour_All.setText(QCoreApplication.translate("MainWindow", u"All", None))
#if QT_CONFIG(statustip)
        self.actionContour_All.setStatusTip(QCoreApplication.translate("MainWindow", u"All contour save.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionContour_All.setWhatsThis(QCoreApplication.translate("MainWindow", u"All contour save.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionModel_manage.setText(QCoreApplication.translate("MainWindow", u"Model manage", None))
#if QT_CONFIG(statustip)
        self.actionModel_manage.setStatusTip(QCoreApplication.translate("MainWindow", u"Model manage.", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(whatsthis)
        self.actionModel_manage.setWhatsThis(QCoreApplication.translate("MainWindow", u"Model manage.", None))
#endif // QT_CONFIG(whatsthis)
        self.actionRectangle.setText(QCoreApplication.translate("MainWindow", u"Rectangle", None))
#if QT_CONFIG(tooltip)
        self.actionRectangle.setToolTip(QCoreApplication.translate("MainWindow", u"Rectangle (R)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionRectangle.setStatusTip(QCoreApplication.translate("MainWindow", u"Create Two-point Rectangle (R)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionRectangle.setShortcut(QCoreApplication.translate("MainWindow", u"R", None))
#endif // QT_CONFIG(shortcut)
        self.actionPoint.setText(QCoreApplication.translate("MainWindow", u"Point", None))
#if QT_CONFIG(tooltip)
        self.actionPoint.setToolTip(QCoreApplication.translate("MainWindow", u"Point (P)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionPoint.setStatusTip(QCoreApplication.translate("MainWindow", u"Create a point (P)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionPoint.setShortcut(QCoreApplication.translate("MainWindow", u"P", None))
#endif // QT_CONFIG(shortcut)
        self.actionMove.setText(QCoreApplication.translate("MainWindow", u"Move", None))
#if QT_CONFIG(tooltip)
        self.actionMove.setToolTip(QCoreApplication.translate("MainWindow", u"Move (M)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionMove.setStatusTip(QCoreApplication.translate("MainWindow", u"Move to select a region (M)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionMove.setShortcut(QCoreApplication.translate("MainWindow", u"M", None))
#endif // QT_CONFIG(shortcut)
        self.actionEdit.setText(QCoreApplication.translate("MainWindow", u"Edit", None))
#if QT_CONFIG(tooltip)
        self.actionEdit.setToolTip(QCoreApplication.translate("MainWindow", u"Edit (E)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionEdit.setStatusTip(QCoreApplication.translate("MainWindow", u"Edit (E)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionEdit.setShortcut(QCoreApplication.translate("MainWindow", u"E", None))
#endif // QT_CONFIG(shortcut)
        self.actionOpenCV.setText(QCoreApplication.translate("MainWindow", u"OpenCV", None))
#if QT_CONFIG(tooltip)
        self.actionOpenCV.setToolTip(QCoreApplication.translate("MainWindow", u"OpenCV (W)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(statustip)
        self.actionOpenCV.setStatusTip(QCoreApplication.translate("MainWindow", u"Enable OpenCV (W)", None))
#endif // QT_CONFIG(statustip)
#if QT_CONFIG(shortcut)
        self.actionOpenCV.setShortcut(QCoreApplication.translate("MainWindow", u"W", None))
#endif // QT_CONFIG(shortcut)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(shortcut)
        self.actionUndo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Z", None))
#endif // QT_CONFIG(shortcut)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(shortcut)
        self.actionRedo.setShortcut(QCoreApplication.translate("MainWindow", u"Ctrl+Y", None))
#endif // QT_CONFIG(shortcut)
        self.actionNew_Project.setText(QCoreApplication.translate("MainWindow", u"New Project", None))
        self.actionR.setText(QCoreApplication.translate("MainWindow", u"R", None))
        self.actionG.setText(QCoreApplication.translate("MainWindow", u"G", None))
        self.actionB.setText(QCoreApplication.translate("MainWindow", u"B", None))
        self.actionRGB.setText(QCoreApplication.translate("MainWindow", u"RGB", None))
        self.actionGray.setText(QCoreApplication.translate("MainWindow", u"Gray", None))
        self.actionMerge.setText(QCoreApplication.translate("MainWindow", u"Merge", None))
#if QT_CONFIG(tooltip)
        self.actionMerge.setToolTip(QCoreApplication.translate("MainWindow", u"Merge (G)", None))
#endif // QT_CONFIG(tooltip)
#if QT_CONFIG(shortcut)
        self.actionMerge.setShortcut(QCoreApplication.translate("MainWindow", u"G", None))
#endif // QT_CONFIG(shortcut)
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuView.setTitle(QCoreApplication.translate("MainWindow", u"View", None))
        self.menuAbout.setTitle(QCoreApplication.translate("MainWindow", u"Help", None))
        self.menuLaguage.setTitle(QCoreApplication.translate("MainWindow", u"Laguage", None))
        self.menuTools.setTitle(QCoreApplication.translate("MainWindow", u"Tools", None))
        self.menuEdit.setTitle(QCoreApplication.translate("MainWindow", u"Edit", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
        self.dock_infos.setWindowTitle(QCoreApplication.translate("MainWindow", u"Info", None))
        self.dock_annos.setWindowTitle(QCoreApplication.translate("MainWindow", u"Annos", None))
        self.dock_labels.setWindowTitle(QCoreApplication.translate("MainWindow", u"Labels", None))
        self.dock_files.setWindowTitle(QCoreApplication.translate("MainWindow", u"Files", None))
    # retranslateUi

